/**
 * Copyright (c) 2000-present Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package gov.nasa.hq.myaudi.model.impl;

import aQute.bnd.annotation.ProviderType;

import com.liferay.expando.kernel.model.ExpandoBridge;
import com.liferay.expando.kernel.util.ExpandoBridgeFactoryUtil;

import com.liferay.exportimport.kernel.lar.StagedModelType;

import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.exception.PortalException;
import com.liferay.portal.kernel.json.JSON;
import com.liferay.portal.kernel.model.CacheModel;
import com.liferay.portal.kernel.model.ModelWrapper;
import com.liferay.portal.kernel.model.User;
import com.liferay.portal.kernel.model.impl.BaseModelImpl;
import com.liferay.portal.kernel.service.ServiceContext;
import com.liferay.portal.kernel.service.UserLocalServiceUtil;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.PortalUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringBundler;

import gov.nasa.hq.myaudi.model.Audi;
import gov.nasa.hq.myaudi.model.AudiModel;
import gov.nasa.hq.myaudi.model.AudiSoap;

import java.io.Serializable;

import java.sql.Types;

import java.util.ArrayList;
import java.util.Date;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * The base model implementation for the Audi service. Represents a row in the &quot;myaudi_Audi&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface {@link AudiModel} exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link AudiImpl}.
 * </p>
 *
 * @author Brian Wing Shun Chan
 * @see AudiImpl
 * @see Audi
 * @see AudiModel
 * @generated
 */
@JSON(strict = true)
@ProviderType
public class AudiModelImpl extends BaseModelImpl<Audi> implements AudiModel {
	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a audi model instance should use the {@link Audi} interface instead.
	 */
	public static final String TABLE_NAME = "myaudi_Audi";
	public static final Object[][] TABLE_COLUMNS = {
			{ "uuid_", Types.VARCHAR },
			{ "audiId", Types.BIGINT },
			{ "groupId", Types.BIGINT },
			{ "companyId", Types.BIGINT },
			{ "userId", Types.BIGINT },
			{ "userName", Types.VARCHAR },
			{ "createDate", Types.TIMESTAMP },
			{ "modifiedDate", Types.TIMESTAMP },
			{ "modelName", Types.VARCHAR },
			{ "exteriorColor", Types.VARCHAR },
			{ "interiorColor", Types.VARCHAR },
			{ "allWheelDrive", Types.BOOLEAN },
			{ "technologyPackage", Types.BOOLEAN },
			{ "coldWeatherPackage", Types.BOOLEAN }
		};
	public static final Map<String, Integer> TABLE_COLUMNS_MAP = new HashMap<String, Integer>();

	static {
		TABLE_COLUMNS_MAP.put("uuid_", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("audiId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("groupId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("companyId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("userId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("userName", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("createDate", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("modifiedDate", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("modelName", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("exteriorColor", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("interiorColor", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("allWheelDrive", Types.BOOLEAN);
		TABLE_COLUMNS_MAP.put("technologyPackage", Types.BOOLEAN);
		TABLE_COLUMNS_MAP.put("coldWeatherPackage", Types.BOOLEAN);
	}

	public static final String TABLE_SQL_CREATE = "create table myaudi_Audi (uuid_ VARCHAR(75) null,audiId LONG not null primary key,groupId LONG,companyId LONG,userId LONG,userName VARCHAR(75) null,createDate DATE null,modifiedDate DATE null,modelName VARCHAR(75) null,exteriorColor VARCHAR(75) null,interiorColor VARCHAR(75) null,allWheelDrive BOOLEAN,technologyPackage BOOLEAN,coldWeatherPackage BOOLEAN)";
	public static final String TABLE_SQL_DROP = "drop table myaudi_Audi";
	public static final String ORDER_BY_JPQL = " ORDER BY audi.exteriorColor ASC";
	public static final String ORDER_BY_SQL = " ORDER BY myaudi_Audi.exteriorColor ASC";
	public static final String DATA_SOURCE = "liferayDataSource";
	public static final String SESSION_FACTORY = "liferaySessionFactory";
	public static final String TX_MANAGER = "liferayTransactionManager";
	public static final boolean ENTITY_CACHE_ENABLED = GetterUtil.getBoolean(gov.nasa.hq.myaudi.service.util.ServiceProps.get(
				"value.object.entity.cache.enabled.gov.nasa.hq.myaudi.model.Audi"),
			true);
	public static final boolean FINDER_CACHE_ENABLED = GetterUtil.getBoolean(gov.nasa.hq.myaudi.service.util.ServiceProps.get(
				"value.object.finder.cache.enabled.gov.nasa.hq.myaudi.model.Audi"),
			true);
	public static final boolean COLUMN_BITMASK_ENABLED = GetterUtil.getBoolean(gov.nasa.hq.myaudi.service.util.ServiceProps.get(
				"value.object.column.bitmask.enabled.gov.nasa.hq.myaudi.model.Audi"),
			true);
	public static final long COMPANYID_COLUMN_BITMASK = 1L;
	public static final long EXTERIORCOLOR_COLUMN_BITMASK = 2L;
	public static final long GROUPID_COLUMN_BITMASK = 4L;
	public static final long MODELNAME_COLUMN_BITMASK = 8L;
	public static final long UUID_COLUMN_BITMASK = 16L;

	/**
	 * Converts the soap model instance into a normal model instance.
	 *
	 * @param soapModel the soap model instance to convert
	 * @return the normal model instance
	 */
	public static Audi toModel(AudiSoap soapModel) {
		if (soapModel == null) {
			return null;
		}

		Audi model = new AudiImpl();

		model.setUuid(soapModel.getUuid());
		model.setAudiId(soapModel.getAudiId());
		model.setGroupId(soapModel.getGroupId());
		model.setCompanyId(soapModel.getCompanyId());
		model.setUserId(soapModel.getUserId());
		model.setUserName(soapModel.getUserName());
		model.setCreateDate(soapModel.getCreateDate());
		model.setModifiedDate(soapModel.getModifiedDate());
		model.setModelName(soapModel.getModelName());
		model.setExteriorColor(soapModel.getExteriorColor());
		model.setInteriorColor(soapModel.getInteriorColor());
		model.setAllWheelDrive(soapModel.isAllWheelDrive());
		model.setTechnologyPackage(soapModel.isTechnologyPackage());
		model.setColdWeatherPackage(soapModel.isColdWeatherPackage());

		return model;
	}

	/**
	 * Converts the soap model instances into normal model instances.
	 *
	 * @param soapModels the soap model instances to convert
	 * @return the normal model instances
	 */
	public static List<Audi> toModels(AudiSoap[] soapModels) {
		if (soapModels == null) {
			return null;
		}

		List<Audi> models = new ArrayList<Audi>(soapModels.length);

		for (AudiSoap soapModel : soapModels) {
			models.add(toModel(soapModel));
		}

		return models;
	}

	public static final long LOCK_EXPIRATION_TIME = GetterUtil.getLong(gov.nasa.hq.myaudi.service.util.ServiceProps.get(
				"lock.expiration.time.gov.nasa.hq.myaudi.model.Audi"));

	public AudiModelImpl() {
	}

	@Override
	public long getPrimaryKey() {
		return _audiId;
	}

	@Override
	public void setPrimaryKey(long primaryKey) {
		setAudiId(primaryKey);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return _audiId;
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Long)primaryKeyObj).longValue());
	}

	@Override
	public Class<?> getModelClass() {
		return Audi.class;
	}

	@Override
	public String getModelClassName() {
		return Audi.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		attributes.put("uuid", getUuid());
		attributes.put("audiId", getAudiId());
		attributes.put("groupId", getGroupId());
		attributes.put("companyId", getCompanyId());
		attributes.put("userId", getUserId());
		attributes.put("userName", getUserName());
		attributes.put("createDate", getCreateDate());
		attributes.put("modifiedDate", getModifiedDate());
		attributes.put("modelName", getModelName());
		attributes.put("exteriorColor", getExteriorColor());
		attributes.put("interiorColor", getInteriorColor());
		attributes.put("allWheelDrive", isAllWheelDrive());
		attributes.put("technologyPackage", isTechnologyPackage());
		attributes.put("coldWeatherPackage", isColdWeatherPackage());

		attributes.put("entityCacheEnabled", isEntityCacheEnabled());
		attributes.put("finderCacheEnabled", isFinderCacheEnabled());

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		String uuid = (String)attributes.get("uuid");

		if (uuid != null) {
			setUuid(uuid);
		}

		Long audiId = (Long)attributes.get("audiId");

		if (audiId != null) {
			setAudiId(audiId);
		}

		Long groupId = (Long)attributes.get("groupId");

		if (groupId != null) {
			setGroupId(groupId);
		}

		Long companyId = (Long)attributes.get("companyId");

		if (companyId != null) {
			setCompanyId(companyId);
		}

		Long userId = (Long)attributes.get("userId");

		if (userId != null) {
			setUserId(userId);
		}

		String userName = (String)attributes.get("userName");

		if (userName != null) {
			setUserName(userName);
		}

		Date createDate = (Date)attributes.get("createDate");

		if (createDate != null) {
			setCreateDate(createDate);
		}

		Date modifiedDate = (Date)attributes.get("modifiedDate");

		if (modifiedDate != null) {
			setModifiedDate(modifiedDate);
		}

		String modelName = (String)attributes.get("modelName");

		if (modelName != null) {
			setModelName(modelName);
		}

		String exteriorColor = (String)attributes.get("exteriorColor");

		if (exteriorColor != null) {
			setExteriorColor(exteriorColor);
		}

		String interiorColor = (String)attributes.get("interiorColor");

		if (interiorColor != null) {
			setInteriorColor(interiorColor);
		}

		Boolean allWheelDrive = (Boolean)attributes.get("allWheelDrive");

		if (allWheelDrive != null) {
			setAllWheelDrive(allWheelDrive);
		}

		Boolean technologyPackage = (Boolean)attributes.get("technologyPackage");

		if (technologyPackage != null) {
			setTechnologyPackage(technologyPackage);
		}

		Boolean coldWeatherPackage = (Boolean)attributes.get(
				"coldWeatherPackage");

		if (coldWeatherPackage != null) {
			setColdWeatherPackage(coldWeatherPackage);
		}
	}

	@JSON
	@Override
	public String getUuid() {
		if (_uuid == null) {
			return "";
		}
		else {
			return _uuid;
		}
	}

	@Override
	public void setUuid(String uuid) {
		if (_originalUuid == null) {
			_originalUuid = _uuid;
		}

		_uuid = uuid;
	}

	public String getOriginalUuid() {
		return GetterUtil.getString(_originalUuid);
	}

	@JSON
	@Override
	public long getAudiId() {
		return _audiId;
	}

	@Override
	public void setAudiId(long audiId) {
		_audiId = audiId;
	}

	@JSON
	@Override
	public long getGroupId() {
		return _groupId;
	}

	@Override
	public void setGroupId(long groupId) {
		_columnBitmask |= GROUPID_COLUMN_BITMASK;

		if (!_setOriginalGroupId) {
			_setOriginalGroupId = true;

			_originalGroupId = _groupId;
		}

		_groupId = groupId;
	}

	public long getOriginalGroupId() {
		return _originalGroupId;
	}

	@JSON
	@Override
	public long getCompanyId() {
		return _companyId;
	}

	@Override
	public void setCompanyId(long companyId) {
		_columnBitmask |= COMPANYID_COLUMN_BITMASK;

		if (!_setOriginalCompanyId) {
			_setOriginalCompanyId = true;

			_originalCompanyId = _companyId;
		}

		_companyId = companyId;
	}

	public long getOriginalCompanyId() {
		return _originalCompanyId;
	}

	@JSON
	@Override
	public long getUserId() {
		return _userId;
	}

	@Override
	public void setUserId(long userId) {
		_userId = userId;
	}

	@Override
	public String getUserUuid() {
		try {
			User user = UserLocalServiceUtil.getUserById(getUserId());

			return user.getUuid();
		}
		catch (PortalException pe) {
			return "";
		}
	}

	@Override
	public void setUserUuid(String userUuid) {
	}

	@JSON
	@Override
	public String getUserName() {
		if (_userName == null) {
			return "";
		}
		else {
			return _userName;
		}
	}

	@Override
	public void setUserName(String userName) {
		_userName = userName;
	}

	@JSON
	@Override
	public Date getCreateDate() {
		return _createDate;
	}

	@Override
	public void setCreateDate(Date createDate) {
		_createDate = createDate;
	}

	@JSON
	@Override
	public Date getModifiedDate() {
		return _modifiedDate;
	}

	public boolean hasSetModifiedDate() {
		return _setModifiedDate;
	}

	@Override
	public void setModifiedDate(Date modifiedDate) {
		_setModifiedDate = true;

		_modifiedDate = modifiedDate;
	}

	@JSON
	@Override
	public String getModelName() {
		if (_modelName == null) {
			return "";
		}
		else {
			return _modelName;
		}
	}

	@Override
	public void setModelName(String modelName) {
		_columnBitmask |= MODELNAME_COLUMN_BITMASK;

		if (_originalModelName == null) {
			_originalModelName = _modelName;
		}

		_modelName = modelName;
	}

	public String getOriginalModelName() {
		return GetterUtil.getString(_originalModelName);
	}

	@JSON
	@Override
	public String getExteriorColor() {
		if (_exteriorColor == null) {
			return "";
		}
		else {
			return _exteriorColor;
		}
	}

	@Override
	public void setExteriorColor(String exteriorColor) {
		_columnBitmask = -1L;

		if (_originalExteriorColor == null) {
			_originalExteriorColor = _exteriorColor;
		}

		_exteriorColor = exteriorColor;
	}

	public String getOriginalExteriorColor() {
		return GetterUtil.getString(_originalExteriorColor);
	}

	@JSON
	@Override
	public String getInteriorColor() {
		if (_interiorColor == null) {
			return "";
		}
		else {
			return _interiorColor;
		}
	}

	@Override
	public void setInteriorColor(String interiorColor) {
		_interiorColor = interiorColor;
	}

	@JSON
	@Override
	public boolean getAllWheelDrive() {
		return _allWheelDrive;
	}

	@JSON
	@Override
	public boolean isAllWheelDrive() {
		return _allWheelDrive;
	}

	@Override
	public void setAllWheelDrive(boolean allWheelDrive) {
		_allWheelDrive = allWheelDrive;
	}

	@JSON
	@Override
	public boolean getTechnologyPackage() {
		return _technologyPackage;
	}

	@JSON
	@Override
	public boolean isTechnologyPackage() {
		return _technologyPackage;
	}

	@Override
	public void setTechnologyPackage(boolean technologyPackage) {
		_technologyPackage = technologyPackage;
	}

	@JSON
	@Override
	public boolean getColdWeatherPackage() {
		return _coldWeatherPackage;
	}

	@JSON
	@Override
	public boolean isColdWeatherPackage() {
		return _coldWeatherPackage;
	}

	@Override
	public void setColdWeatherPackage(boolean coldWeatherPackage) {
		_coldWeatherPackage = coldWeatherPackage;
	}

	@Override
	public StagedModelType getStagedModelType() {
		return new StagedModelType(PortalUtil.getClassNameId(
				Audi.class.getName()));
	}

	public long getColumnBitmask() {
		return _columnBitmask;
	}

	@Override
	public ExpandoBridge getExpandoBridge() {
		return ExpandoBridgeFactoryUtil.getExpandoBridge(getCompanyId(),
			Audi.class.getName(), getPrimaryKey());
	}

	@Override
	public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
		ExpandoBridge expandoBridge = getExpandoBridge();

		expandoBridge.setAttributes(serviceContext);
	}

	@Override
	public Audi toEscapedModel() {
		if (_escapedModel == null) {
			_escapedModel = (Audi)ProxyUtil.newProxyInstance(_classLoader,
					_escapedModelInterfaces, new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		AudiImpl audiImpl = new AudiImpl();

		audiImpl.setUuid(getUuid());
		audiImpl.setAudiId(getAudiId());
		audiImpl.setGroupId(getGroupId());
		audiImpl.setCompanyId(getCompanyId());
		audiImpl.setUserId(getUserId());
		audiImpl.setUserName(getUserName());
		audiImpl.setCreateDate(getCreateDate());
		audiImpl.setModifiedDate(getModifiedDate());
		audiImpl.setModelName(getModelName());
		audiImpl.setExteriorColor(getExteriorColor());
		audiImpl.setInteriorColor(getInteriorColor());
		audiImpl.setAllWheelDrive(isAllWheelDrive());
		audiImpl.setTechnologyPackage(isTechnologyPackage());
		audiImpl.setColdWeatherPackage(isColdWeatherPackage());

		audiImpl.resetOriginalValues();

		return audiImpl;
	}

	@Override
	public int compareTo(Audi audi) {
		int value = 0;

		value = getExteriorColor().compareTo(audi.getExteriorColor());

		if (value != 0) {
			return value;
		}

		return 0;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) {
			return true;
		}

		if (!(obj instanceof Audi)) {
			return false;
		}

		Audi audi = (Audi)obj;

		long primaryKey = audi.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return (int)getPrimaryKey();
	}

	@Override
	public boolean isEntityCacheEnabled() {
		return ENTITY_CACHE_ENABLED;
	}

	@Override
	public boolean isFinderCacheEnabled() {
		return FINDER_CACHE_ENABLED;
	}

	@Override
	public void resetOriginalValues() {
		AudiModelImpl audiModelImpl = this;

		audiModelImpl._originalUuid = audiModelImpl._uuid;

		audiModelImpl._originalGroupId = audiModelImpl._groupId;

		audiModelImpl._setOriginalGroupId = false;

		audiModelImpl._originalCompanyId = audiModelImpl._companyId;

		audiModelImpl._setOriginalCompanyId = false;

		audiModelImpl._setModifiedDate = false;

		audiModelImpl._originalModelName = audiModelImpl._modelName;

		audiModelImpl._originalExteriorColor = audiModelImpl._exteriorColor;

		audiModelImpl._columnBitmask = 0;
	}

	@Override
	public CacheModel<Audi> toCacheModel() {
		AudiCacheModel audiCacheModel = new AudiCacheModel();

		audiCacheModel.uuid = getUuid();

		String uuid = audiCacheModel.uuid;

		if ((uuid != null) && (uuid.length() == 0)) {
			audiCacheModel.uuid = null;
		}

		audiCacheModel.audiId = getAudiId();

		audiCacheModel.groupId = getGroupId();

		audiCacheModel.companyId = getCompanyId();

		audiCacheModel.userId = getUserId();

		audiCacheModel.userName = getUserName();

		String userName = audiCacheModel.userName;

		if ((userName != null) && (userName.length() == 0)) {
			audiCacheModel.userName = null;
		}

		Date createDate = getCreateDate();

		if (createDate != null) {
			audiCacheModel.createDate = createDate.getTime();
		}
		else {
			audiCacheModel.createDate = Long.MIN_VALUE;
		}

		Date modifiedDate = getModifiedDate();

		if (modifiedDate != null) {
			audiCacheModel.modifiedDate = modifiedDate.getTime();
		}
		else {
			audiCacheModel.modifiedDate = Long.MIN_VALUE;
		}

		audiCacheModel.modelName = getModelName();

		String modelName = audiCacheModel.modelName;

		if ((modelName != null) && (modelName.length() == 0)) {
			audiCacheModel.modelName = null;
		}

		audiCacheModel.exteriorColor = getExteriorColor();

		String exteriorColor = audiCacheModel.exteriorColor;

		if ((exteriorColor != null) && (exteriorColor.length() == 0)) {
			audiCacheModel.exteriorColor = null;
		}

		audiCacheModel.interiorColor = getInteriorColor();

		String interiorColor = audiCacheModel.interiorColor;

		if ((interiorColor != null) && (interiorColor.length() == 0)) {
			audiCacheModel.interiorColor = null;
		}

		audiCacheModel.allWheelDrive = isAllWheelDrive();

		audiCacheModel.technologyPackage = isTechnologyPackage();

		audiCacheModel.coldWeatherPackage = isColdWeatherPackage();

		return audiCacheModel;
	}

	@Override
	public String toString() {
		StringBundler sb = new StringBundler(29);

		sb.append("{uuid=");
		sb.append(getUuid());
		sb.append(", audiId=");
		sb.append(getAudiId());
		sb.append(", groupId=");
		sb.append(getGroupId());
		sb.append(", companyId=");
		sb.append(getCompanyId());
		sb.append(", userId=");
		sb.append(getUserId());
		sb.append(", userName=");
		sb.append(getUserName());
		sb.append(", createDate=");
		sb.append(getCreateDate());
		sb.append(", modifiedDate=");
		sb.append(getModifiedDate());
		sb.append(", modelName=");
		sb.append(getModelName());
		sb.append(", exteriorColor=");
		sb.append(getExteriorColor());
		sb.append(", interiorColor=");
		sb.append(getInteriorColor());
		sb.append(", allWheelDrive=");
		sb.append(isAllWheelDrive());
		sb.append(", technologyPackage=");
		sb.append(isTechnologyPackage());
		sb.append(", coldWeatherPackage=");
		sb.append(isColdWeatherPackage());
		sb.append("}");

		return sb.toString();
	}

	@Override
	public String toXmlString() {
		StringBundler sb = new StringBundler(46);

		sb.append("<model><model-name>");
		sb.append("gov.nasa.hq.myaudi.model.Audi");
		sb.append("</model-name>");

		sb.append(
			"<column><column-name>uuid</column-name><column-value><![CDATA[");
		sb.append(getUuid());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>audiId</column-name><column-value><![CDATA[");
		sb.append(getAudiId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>groupId</column-name><column-value><![CDATA[");
		sb.append(getGroupId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>companyId</column-name><column-value><![CDATA[");
		sb.append(getCompanyId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>userId</column-name><column-value><![CDATA[");
		sb.append(getUserId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>userName</column-name><column-value><![CDATA[");
		sb.append(getUserName());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>createDate</column-name><column-value><![CDATA[");
		sb.append(getCreateDate());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>modifiedDate</column-name><column-value><![CDATA[");
		sb.append(getModifiedDate());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>modelName</column-name><column-value><![CDATA[");
		sb.append(getModelName());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>exteriorColor</column-name><column-value><![CDATA[");
		sb.append(getExteriorColor());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>interiorColor</column-name><column-value><![CDATA[");
		sb.append(getInteriorColor());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>allWheelDrive</column-name><column-value><![CDATA[");
		sb.append(isAllWheelDrive());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>technologyPackage</column-name><column-value><![CDATA[");
		sb.append(isTechnologyPackage());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>coldWeatherPackage</column-name><column-value><![CDATA[");
		sb.append(isColdWeatherPackage());
		sb.append("]]></column-value></column>");

		sb.append("</model>");

		return sb.toString();
	}

	private static final ClassLoader _classLoader = Audi.class.getClassLoader();
	private static final Class<?>[] _escapedModelInterfaces = new Class[] {
			Audi.class, ModelWrapper.class
		};
	private String _uuid;
	private String _originalUuid;
	private long _audiId;
	private long _groupId;
	private long _originalGroupId;
	private boolean _setOriginalGroupId;
	private long _companyId;
	private long _originalCompanyId;
	private boolean _setOriginalCompanyId;
	private long _userId;
	private String _userName;
	private Date _createDate;
	private Date _modifiedDate;
	private boolean _setModifiedDate;
	private String _modelName;
	private String _originalModelName;
	private String _exteriorColor;
	private String _originalExteriorColor;
	private String _interiorColor;
	private boolean _allWheelDrive;
	private boolean _technologyPackage;
	private boolean _coldWeatherPackage;
	private long _columnBitmask;
	private Audi _escapedModel;
}